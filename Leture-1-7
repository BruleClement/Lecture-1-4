
#include <iostream>   
#include <cmath> 
#include <time.h>
#include <cstdlib>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>


using namespace std;

/*
 * 

 * 
 */



/* TP 1 Application : */

/* Algorithm providing the biggest number amongst 3 given ones */
void biggestnumber(int numberofnumber)
{
    
    double arrayofnumber[numberofnumber];
    double c;
    double biggest=0;
    for(int i=0;i<numberofnumber;i++)
    {
        cout<<"entrer the "<<i<<" eme number"<<endl;
        cin>>c;
        arrayofnumber[i]=c;
    }
    biggest=arrayofnumber[0];
    for(int i=1;i<numberofnumber;i++)
    {
     if(arrayofnumber[i]>biggest)
     {
      biggest=arrayofnumber[i];   
     }
     
    }
    cout<<"the biggest number is "<<biggest<<endl;
    
}

/* Algorithm providing a factorial for a given number */
void factorial(int number)
{
    int factoriel=1;
    for(int i=1;i<=number;i++)
    {
        factoriel=factoriel*i;
    }
    cout<<"the factorial of "<<number<<" is "<<factoriel<<endl;
}


/* Algorithm providing numbers of the Fibonacci series ’till term 100 */
void fibonacciserie(int number)
{
    int firstnumberoftheserie=0;
    int secondnumberoftheserie=1;
    int nextnumber=0;
    cout<<" | "<<firstnumberoftheserie<<" | "<<secondnumberoftheserie;
    while(nextnumber<=number)
    {   
        cout<<" | ";
        nextnumber=firstnumberoftheserie+secondnumberoftheserie;
        firstnumberoftheserie=secondnumberoftheserie;
        secondnumberoftheserie=nextnumber;
        cout<<secondnumberoftheserie;
    }
    cout<<" | ";
}

/* Algorithm providing mean and variance of 5 given numbers
 * Algorithm providing mean and variance of 100 given numbers7*/

void meanvariance(int numberofnumber)
{
    double arrayofnumber[numberofnumber];
    double d;
    double mea=0;
    double var=0;
    for(int i=0;i<numberofnumber;i++)
    {
        cout<<"entrer the "<<i<<" eme number"<<endl;
        cin>>d;
        arrayofnumber[i]=d;
    }
    for(int i=0;i<numberofnumber;i++)
    {
        mea=mea+arrayofnumber[i];
    }
    mea=mea/numberofnumber;
    for(int j=0;j<numberofnumber;j++)
    {
        var=pow(arrayofnumber[j]-mea,2)+var;
    }
    var=var/(numberofnumber-1);   
}

/* TP 2 Application : */

/* Program that verifies if a number is even or odd */
void oddeven(int number)
{
    if(number%2==0)
    {
        printf("the number is even");
    }
    else
    {
        printf("the number is odd");
    }
    
}

/*  Program asking for two integers and returning their sum, product, difference, and division */
void sumproductdifferencedivision(double number1, double number2)
{
    double array[4];
    for(int i=0;i<4;i++)
    {
        array[i]=0;
    }
    array[0]=number1+number2;
    array[1]=number1-number2;
    array[2]=number1*number2;
    if(number2!=0)
    {
        array[3]=number1/number2;
            for(int i=0;i<4;i++)
            {
                cout<<" | "<<array[i]<<" | ";
            }
            cout<<endl;
    }
    else
    {
        printf("It's impossible to do the division, sorry");
        for(int i=0;i<4;i++)
        {
            cout<<" | "<<array[i]<<" | ";
        }
        cout<<endl;
    }   
}

/* Program asking for two integers A and B exchanging their values and returning them */
void exchangevalue(double number1,double number2)
{
    double a=0;
    a=number1;
    number1=number2;
    number2=a;
    cout<<"now the first number is "<<number2<<" and the second number is "<<number1<<endl;   
}

/* ProgramDecToBinconverting a number from decimal to binary */
void DecToBin(int dec)
{
    int n=0;
    int changement;
    int middle;
    n=(int)(log(dec)/log(2));
    n=n+1;
    int arraybin[n];
    for(int i=0;i<n;i++)
    {
    if(dec%2==0)
    {
        dec=(int)(dec/2);
        arraybin[i]=0;
    }
    else
    {
        dec=(int)(dec/2);
        arraybin[i]=1;
    }
    }
    
    middle=(int)(n/2);
    for(int i=0;i<middle;i++)
    {
        changement=arraybin[i];
        arraybin[i]=arraybin[n-1-i];
        arraybin[n-1-i]=changement;
    }
    for(int i=0;i<n;i++)
    {
        cout<<arraybin[i];
    }
}

/* ProgramDecToHexconverting a number from decimal to hexadecimal */
void DecToHex(int dec)
{
    int n=0;
    int hex;
    string changement;
    int middle;
    n=(int)(log(dec)/log(16));
    n=n+1;
    int arrayhex[n];
    string arrayfinal[n];
    for(int i=0;i<n;i++)
    {
        int hex=dec%16;
        dec=(int)(dec/16);
        arrayhex[i]=hex;
    }
    string lettre[16];
    lettre[0]="0";
    lettre[1]="1";
    lettre[2]="2";
    lettre[3]="3";
    lettre[4]="4";
    lettre[5]="5";
    lettre[6]="6";
    lettre[7]="7";
    lettre[8]="8";
    lettre[9]="9";
    lettre[10]="A";
    lettre[11]="B";
    lettre[12]="C";
    lettre[13]="D";
    lettre[14]="E";
    lettre[15]="F";
    

    for(int i=0;i<n;i++)
        {
             arrayfinal[i]=lettre[arrayhex[i]]; 
        }
    middle=(int)(n/2);
    for(int i=0;i<middle;i++)
    {
        changement=arrayfinal[i];
        arrayfinal[i]=arrayfinal[n-1-i];
        arrayfinal[n-1-i]=changement;
    }
    
    for(int i=0;i<n;i++)
        {
             cout<<arrayfinal[i]; 
        }
    
                
    cout<<endl;
    
}

/*  ProgramBinToDecconverting a number from binary to decimal */
void BinToDec(int bin)
{
 int size=0;   
 size=log10((double)bin)+1;
 int number=0;
 int dec=0;
 
 for(int i=0;i<size;i++)
 {
 number=bin%10;
 bin=bin/10;
 if(number==1)
 {
 dec=pow(2,i)+dec;
 }
 }
 cout<<dec<<endl;
 
}
/* ProgramHexToDecconverting a number from hexadecimal to decimal */
void HexToDec(string hex)
{
    string lettre="0123456789ABCDEF";
    string arraylettre[16];
    int dec=0;
    for(int i=0;i<16;i++)
    {
        arraylettre[i]=lettre[i];
    }
    int size=hex.size();
    string arrayhex[size];
    for(int i=0;i<size;i++)
    {
        arrayhex[i]=hex[i];
    }
    for(int j=0;j<size;j++)
    {
    for(int i=0;i<16;i++)
    {
        if(arrayhex[j]==arraylettre[i])
        {
           dec=i*pow(16,size-1-j)+dec; 
        }
    }
    }
    cout<<dec<<endl;
    
}

/* ProgramHexToBinconverting a number from hexadecimal to binary */
void HexToBin(string hex)
{
    string lettre="0123456789ABCDEF";
    string arraylettre[16];
    for(int i=0;i<16;i++)
    {
        arraylettre[i]=lettre[i];
    }
    int size=hex.size();
    string arrayhex[size];
    int arraybin[size];
    for(int i=0;i<size;i++)
    {
        arrayhex[i]=hex[i];
    }
    for(int j=0;j<size;j++)
    {
    for(int i=0;i<16;i++)
    {
        if(arrayhex[j]==arraylettre[i])
        {
            arraybin[j]=i;
        }
    }
    }
    for(int i=0;i<size;i++)
    {
        DecToBin(arraybin[i]);
    }

    
    
}

/* ProgramBinToHexconverting a number from binary to hexadecimal */
void BinToHex(int bin)
{
 int size=0;   
 size=log10((double)bin)+1;
 int arrayofbin[size];
 for(int i=0;i<size;i++)
 {
     arrayofbin[i]=bin%10;
     bin=bin/10;
 }
 int numberofhex=size/4;
 int arrayofhex[numberofhex+1];
 for(int i=0;i<numberofhex+1;i++)
 {
     arrayofhex[i]=0;
 }
 
 for(int j=0;j<numberofhex;j++)
 {
 for(int i=j*4;i<4+j*4;i++)
 {
     if(arrayofbin[i]==1)
     {    
     arrayofbin[i]=pow(2,i-j*4);
     }
     arrayofhex[j]=arrayofbin[i]+arrayofhex[j];
 }
 }
 for(int i=numberofhex*4;i<size;i++)
 {
     if(arrayofbin[i]==1)
     {
     arrayofbin[i]=pow(2,i-numberofhex*4);
     }
     arrayofhex[numberofhex]=arrayofbin[i]+arrayofhex[numberofhex];
 }
    string lettre="0123456789ABCDEF";
    string arraylettre[16];
    int dec=0;
    for(int i=0;i<16;i++)
    {
        arraylettre[i]=lettre[i];
    }
    for(int i=numberofhex;i>0-1;i--)
    {
        for(int j=0;j<16;j++)
        {
            if(arrayofhex[i]==j)
            {
                cout<<arraylettre[j];
            }
        }
    }
    

    
    
}



/* TP 3 Application : */

/*  Program answering the question whether a number is prime or not */
void primeornot(int number)
{
    int prime=0;
    for(int i=2;i<number;i++)
    {
        if(number%i==0)
        {
            prime=1;
        }
    }
    if(prime==1)
    {
        cout<<"the number is not prime"<<endl; 
    }
    else
    {
        cout<<"the number is prime"<<endl;
    }
}

/* Program solving quadratic equation, i.e.ax2+bx+c= 0 */
void solvingquadraticequation(double a,double b,double c)
{
    double delta=pow(b,2)-4*a*c;
    double solution1=0;
    double solution2=0;
    if(delta==0)
    {
        solution1=(-b)/(2*a);
        cout<<"the solution is "<<solution1<<endl;
        
    }
    else if(delta>0)
    {
        solution1=((-b+sqrt(delta))/(2*a));
        solution2=((-b-sqrt(delta))/(2*a));
        cout<<"the solution are "<<solution1<<" and "<<solution2<<endl;
    }
    else
    {
        cout<<"no solution of the system"<<endl;
    }
}

/* Program finding the area of any triangle using Heron’s Formula */
void areaofanytriangle(double a,double b,double c)
{
    double s=0.5*(a+b+c);
    double Pdelta=sqrt(s*(s-a)*(s-b)*(s-c));
    cout<<"the area is "<<Pdelta<<endl;
}

/*  Program finding the greatest common divisor */
void greatestcommondivisor(int number1,int number2)
{
    int greatcom=1;
    if(number1>number2)
    {
        for(int i=2;i<number2+1;i++)
        {
            if((number1%i==0)&&(number2%i==0))
            {
                greatcom=i;
            }
        }
    }
    else
    {
        for(int i=2;i<number1+1;i++)
        {
            if((number1%i==0)&&(number2%i==0))
            {
                greatcom=i;
            }
        }
    }
    cout<<"the greatest common divisor is "<<greatcom<<endl;
    
}

/*  Program finding the least common multiple */
void leastcommonmultiple(int number1,int number2)
{
    int leastcom=number1;
    if(number1>number2)
    {
        for(int i=2;i<number2+1;i++)
        {
            if((number1%i==0)&&(number2%i==0))
            {
                if(leastcom>i)
                {
                leastcom=i;
                }
                
            }
        }
    }
    else
    {
        for(int i=2;i<number1+1;i++)
        {
            if((number1%i==0)&&(number2%i==0))
            {
                if(leastcom>i)
                {
                leastcom=i;
                }
            }
        }
    }
    if(leastcom==number1)
    {
        leastcom=1;
    }
    cout<<"the least common multiple is "<<leastcom<<endl;  
}

/* Program converting temperature in Celsius to Fahrenheit and the other way round */
void convertingcelsiustofahrenheit(double celsius)
{
    double fahrenheit=(9/5)*celsius+32;
    cout<<celsius<<" is "<<fahrenheit<<" fahrenheit"<<endl;
}
void convertingfahrenheittocelsius(double fahrenheit)
{
    double celsius=(fahrenheit-32)/1.8;
    cout<<fahrenheit<<" is "<<celsius<<" celsius"<<endl;
}

/* Program converting kilometers per hour to miles per hour and the other way round */
void convertingMillestoKilometres(double milles)
{
    double kilometres=milles/0.62137;
    cout<<milles<<" is "<<kilometres<<" kilometres"<<endl;
}
void convertingKilometrestoMilles(double kilometres)
{
    double milles=kilometres*0.62137;
    cout<<kilometres<<" is "<<milles<<" milles "<<endl;
    
}

/* Program converting centimeters to inches and the other way round */
void convertingcentimeterstoinches(double centimeters)
{
    double inches=2.54*centimeters;
    cout<<centimeters<<" is "<<inches<<" inches "<<endl;
}
void convertinginchestocentimeters(double inches)
{
    double centimeters=0.3937*inches;
    cout<<inches<<" is "<<centimeters<<" centimeters "<<endl;
}

/* Program converting temperature in Kelvin to Celsius and the other way round */
void convertingkelvintocelsius(double kelvin)
{
    double celsius=kelvin-273.15;
    cout<<kelvin<<" is "<<celsius<<" celsius "<<endl;
}
void convertingcelsiustokelvin(double celsius)
{
    double kelvin=celsius+273.15;
    cout<<celsius<<" is "<<kelvin<<" kelvin "<<endl;
}

/*  An uniformly distributed float or double between 0 and 1 */
void uniformlydistributeddouble0_1()
{
    double unifdouble=0;
    srand (time(NULL));
    unifdouble=(rand()/(double)RAND_MAX)*1;        
    cout<<unifdouble<<endl;
}

/* An uniformly distributed float or double between -1 and 1 */
void uniformlydistributeddouble1_moins1()
{
    double unifdouble=0;
    srand (time(NULL));
    unifdouble=(rand()/(double)RAND_MAX)*2-1;        
    cout<<unifdouble<<endl;
}

/* An uniformly distributed float or double between A and B  */
void uniformlydistributeddoubleA_B(int a,int b)
{
    double unifdouble=0;
    srand (time(NULL));
    unifdouble=(rand()/(double)RAND_MAX)*(b-a)+a;        
    cout<<unifdouble<<endl;
}

/* An integer uniformly distributed between 0 and 100 */
void uniformlydistributedinteger0_100()
{
    int unifint=0;
    srand (time(NULL));
    unifint=(int)(rand()%100);        
    cout<<unifint<<endl;
}

/* An integer uniformly distributed between A and B */
void uniformlydistributedintegerA_B(int a,int b)
{
    int unifint=0;
    srand (time(NULL));
    unifint=(int)(rand()%(b-a)+a);        
    cout<<unifint<<endl;
}

/* Exponentially distributed float or double */
void exponentialdistributedinteger(double landa )
{
    double unifdouble=0;
    srand (time(NULL));
    unifdouble=(rand()/(double)RAND_MAX);
    double expodouble=0;
    cout<<unifdouble<<endl;
    expodouble=landa*exp(-landa*unifdouble);
    cout<<expodouble<<endl;
    
    
}

/* TP 4 Application : */


/* Usea= 313,c= 127andm= 12323to generate a series of pseudorandom number */
void seriepseudorandomnumber()
{
    int a=313;
    int c=127;
    int m=12323;
    double x=1;
    double xn=0;
    for(int i=0;i<100;i++)
    {
        xn=(int)(a*x+c)%m;
        cout<<xn<<" | ";
        x=xn;
        
    }
    
}

/* Transform pseudo random integers into uniformly distributed on (0,1) */
void uniformlydistributedinteger0_1()
{
    int unifint=0;
    srand (time(NULL));
    unifint=(int)(rand());  
    unifint=unifint%2;
    cout<<unifint<<endl;
}

/* Calculate theoretical values for our uniformly distributed random variable */
void uniformlydistributeddistribuedA_B(int a,int b)
{
    double unifdouble=0;
    srand (time(NULL));
    unifdouble=(rand()/(double)RAND_MAX)*(b-a)+a;        
    cout<<unifdouble<<endl;
}

/* Calculate mean and standard deviation of your generated sample. Do those values correspondto theoretical ones */
void uniformlydistributeddoublemeanstandardderivationA_B(int a,int b)
{
    double unifdouble=0;
    srand (time(NULL));
    unifdouble=(int)(rand()%(b-a)+a);
    cout<<unifdouble<<endl;
    double meanU=(a+b)/2;
    double stDEV=(b-a)/pow(12,0.5);
    cout<<"mean : "<<meanU<<endl;
    cout<<"stDEV : "<<stDEV<<endl;
}

/* a program that generates a random, uniformly distributed, integer over selected interval andthen asks an user to guess that number, providing hints */
void guessnumber(int a,int b)
{
    int final=0;
    srand(time(NULL));
    double realnumber=rand()%(b-a)+a;
    double number;
    cout<<"you have 10 chance for find the number"<<endl;
    
    for(int i=0;i<10;i++)
    {
    if(final==0)
    {
    cout<<"which is the number?"<<endl;
    cin>>number;
    if(number==realnumber)
    {
        cout<<"congratulation, you win!!!!!!"<<endl;
        final=1;
    }
    else if(number>realnumber)
    {
        cout<<"the number is smaller"<<endl;
    }
    else
    {
        cout<<"the number is bigger"<<endl;
    }
    
    }
    }
}

 /* program that generates a series of random, uniformly distributed, real numbers and thenchecks their mean and variance*/
void randomuniformaly(int size,int a,int b)
{
    double arrayrandom[size];
    srand(time(NULL));
    double mean=0;
    for(int i=0;i<size;i++)
    {
        arrayrandom[i]=(rand()/(double)RAND_MAX)*(b-a)+a;
        mean=arrayrandom[i]+mean;
        cout<<" | "<<arrayrandom[i];
    }
    cout<<endl;
    mean=mean/size;
    double var=0;
    for(int j=0;j<size;j++)
    {
        var=pow(arrayrandom[j]-mean,2)+var;
    }
    var=var/(size-1); 
    cout<<"the mean is "<<mean<<" and the var is "<<var<<endl;
    
}

/* program that generates a series of random, exponentially distributed, real numbers andthen checks their mean and variance */

void randomexponential(int size,int a,int b, double landa)
{
    double arrayrandom[size];
    srand(time(NULL));
    double mean=0;
    
    for(int i=0;i<size;i++)
    {
        double randomexp=rand()%(b-a)+a;
        arrayrandom[i]=landa*exp(-landa*randomexp);
        mean=arrayrandom[i]+mean;
        cout<<" | "<<arrayrandom[i];
    }
    cout<<endl;
    mean=mean/size;
    double var=0;
    for(int j=0;j<size;j++)
    {
        var=pow(arrayrandom[j]-mean,2)+var;
    }
    var=var/(size-1); 
    cout<<"the mean is "<<mean<<" and the var is "<<var<<endl;
    
}

/* Generate many times (e.g.n= 1000) two independently uniformly distributed random vari-ablesx,y∼U(0,1)*/
void randomuniformaly2variable(int size)
{
    double arrayrandom[size];
    double arrayrandom2[size];
    srand(time(NULL));
    cout<<"x : ";
    for(int i=0;i<size;i++)
    {
        arrayrandom[i]=(rand()/(double)RAND_MAX);
        cout<<arrayrandom[i]<<" | ";
    }
    cout<<"y : ";
    for(int i=0;i<size;i++)
    {
        arrayrandom2[i]=(rand()/(double)RAND_MAX);
        cout<<arrayrandom2[i]<<" | ";
    }
    
    
}

/* For each iteration, verify if x2+y2=<1 */
void verifyxcarreycarreinf1(int size)
{
    double arrayrandom[size];
    double arrayrandom2[size];
    int verify=1;
    srand(time(NULL));

    for(int i=0;i<size;i++)
    {
        arrayrandom[i]=(rand()/(double)RAND_MAX);
        arrayrandom2[i]=(rand()/(double)RAND_MAX);
        sum=pow(arrayrandom[i],2)+pow(arrayrandom2[i],2);
        if(sum>1)
        {
            cout<<"la somme est verifie"<<endl;
        }

    
        
    }

    
}
/*Write a program that generates a series of normally distributed number */
double box_muller(float m, float s) {                     
double x1, x2, w, y1;
double y2;
int use_last = 0;
srand((unsigned)time(NULL));

if (use_last) {
    y1 = y2;
    use_last = 0;
}
else {

    do {
        x1 = 2.0 * ((double)rand() / (RAND_MAX)) - 1.0;
        x2 = 2.0 * ((double)rand() / (RAND_MAX)) - 1.0;
        w = x1 * x1 + x2 * x2;
    } while (w >= 1.0);

    w = sqrt((-2.0 * log(w)) / w);
    y1 = x1 * w;
    y2 = x2 * w;
    use_last = 1;
}

return(m + y1 * s);
}


/* TP 5 Application : */

/* Bubble sorting */
void bubblesorting(double arrayofnumber[],int size)
{
    double changement=0;
    for(int i=1;i<size;i++)
    {
        if(arrayofnumber[i]<arrayofnumber[i-1])
        {
            changement=arrayofnumber[i];
            arrayofnumber[i]=arrayofnumber[i-1];
            arrayofnumber[i-1]=changement;
            
        }
    }
    for(int i=1;i<size;i++)
    {
        if(arrayofnumber[i]<arrayofnumber[i-1])
        {
            bubblesorting(arrayofnumber,size);
        }
    }
    for(int i=0;i<size;i++)
    {
      cout<<" | "<<arrayofnumber[i]<<" | ";
    }
    cout<<endl;    
}

/* Insertion sorting */
void insertionsorting(double arrayofnumber[],int size)
{
    double changement=0;
    int placesmaller;
    for(int j=0;j<size;j++)
    {
        placesmaller=j;
    for(int i=j+1;i<size;i++)
    {
        if(arrayofnumber[placesmaller]>arrayofnumber[i])
        {
            placesmaller=i;
        }
    }
    changement=arrayofnumber[placesmaller];
    arrayofnumber[placesmaller]=arrayofnumber[j];        
    arrayofnumber[j]=changement;
    }
    for(int i=0;i<size;i++)
    {
        cout<<" | "<<arrayofnumber[i]<<" | ";
    }
    cout<<endl;
    
}

/* TP 6 Application : */
/* Je n'ai pas fait les exercices du TP 6 car je dois me concentrer sur le projet*/

/* TP 7 Application : */
/* Il n'y a pas de programme à ecrire dans le TP 7*/












   





int main(int argc, char *argv[])
{
/* You can try the function you want*/


    
    
}


